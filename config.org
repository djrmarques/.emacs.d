* Which Key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :init
  (which-key-mode)
  )
#+END_SRC

* Evil Mode
  #+begin_src emacs-lisp
(use-package evil
  :ensure t ;; install the evil package if not installed
  :init ;; tweak evil's configuration before loading it
  (setq evil-search-module 'evil-search)
  (setq evil-ex-complete-emacs-commands nil)
  (setq evil-vsplit-window-right t)
  (setq evil-split-window-below t)
  (setq evil-shift-round nil)
  (setq evil-want-C-u-scroll t)
  :config ;; tweak evil after loading it
  (evil-mode)

  ;; example how to map a command in normal mode (called 'normal state' in evil)
  (define-key evil-normal-state-map (kbd ", w") 'evil-window-vsplit))

  #+end_src

* Tree Sitter 
  #+begin_src emacs-lisp
(use-package tree-sitter
  :ensure t 
  :init 
)
(use-package tree-sitter-langs
  :ensure t 
  :init 
)

(global-tree-sitter-mode)
(add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode) 

  #+end_src
* Theme
  #+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
  :ensure t
  :init
  (load-theme 'zenburn t)
)

  #+END_SRC
  
* LSP mode
  #+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :init
  ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
  (setq lsp-keymap-prefix "C-c l")
  :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
         (python-mode . lsp)
         (rust-mode . lsp)
         ;; if you want which-key integration
         (lsp-mode . lsp-enable-which-key-integration))
  :commands lsp)

;; optionally
(use-package lsp-ui :init :commands lsp-ui-mode)
;; if you are ivy user
(use-package lsp-ivy :init :commands lsp-ivy-workspace-symbol)

  #+END_SRC

* Fonts
  #+BEGIN_SRC emacs-lisp
  (set-frame-font "Hack-14" nil t)
  #+END_SRC

* Beacon mode
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :init
    (beacon-mode 1))
#+END_SRC

* Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
    :ensure t
    :config
    (global-set-key (kbd "M-m") 'magit)
)
#+END_SRC

* Powerline 
#+BEGIN_SRC emacs-lisp
  (use-package telephone-line
    :ensure t
    :init 
    (telephone-line-mode t)
  )
#+END_SRC

* Display Time
   #+BEGIN_SRC emacs-lisp
   (setq display-time-24h-format t)
   (display-time-mode 1)
   #+END_SRC

* Dashboard
  #+BEGIN_SRC emacs-lisp
  (use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook))
  #+END_SRC

* Programming general
** Rainbow Delimiters
  #+BEGIN_SRC emacs-lisp
    (use-package rainbow-delimiters
      :ensure t
      :config
      (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
      )

  #+END_SRC
** Smart Parens
   #+BEGIN_SRC emacs-lisp
   (use-package smartparens
   :ensure t
   :init
   (add-hook 'prog-mode-hook #'smartparens-mode)
   )
   #+END_SRC
** Linum Mode
   #+BEGIN_SRC emacs-lisp
     (add-hook 'prog-mode-hook 'linum-mode)
   #+END_SRC

* Ivy
** Install libraries
  #+BEGIN_SRC emacs-lisp
  (use-package swiper
  :ensure t
  )
  
  (use-package counsel
  :ensure t
  )

  (use-package ivy
  :ensure t
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)
  ;; enable this if you want `swiper' to use it
  ;; (setq search-default-mode #'char-fold-to-regexp)
  (global-set-key (kbd "C-s") 'swiper)
  (global-set-key (kbd "C-c C-r") 'ivy-resume)
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (global-set-key (kbd "<f1> f") 'counsel-describe-function)
  (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
  (global-set-key (kbd "<f1> l") 'counsel-find-library)
  (global-set-key (kbd "C-c g") 'counsel-git)
  (global-set-key (kbd "C-c j") 'counsel-git-grep)
  (global-set-key (kbd "C-c k") 'counsel-yank-pop)
  (global-set-key (kbd "C-x l") 'counsel-locate)
  (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
  )
  
  #+END_SRC

* Projectile
#+begin_src emacs-lisp
  (use-package projectile
  :ensure t
  :init 
  (projectile-mode +1)
  :config 
  (global-set-key (kbd "C-x p") 'projectile-command-map)
  )

#+end_src

  
