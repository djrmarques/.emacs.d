#+STARTUP: overview

* General setup
#+begin_src emacs-lisp

  (setq inhibit-startup-message t)
  (setq initial-scratch-message nil)

(setq ring-bell-function 'ignore)

(global-prettify-symbols-mode t) 

(tool-bar-mode -1)
(menu-bar-mode -1)
#+end_src
* Which Key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :init
  (which-key-mode)
  )
#+END_SRC

* Backup files
#+begin_src emacs-lisp
    (setq backup-by-copying t   ; don't clobber symlinks
	  version-control t     ; use versioned backups
	  delete-old-versions t
	  kept-new-versions 6
	  kept-old-versions 2)

  (setq backup-directory-alist `((".*" . ,temporary-file-directory)))

  (setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
#+end_src

* Evil Mode
  #+begin_src emacs-lisp
	(use-package evil
	  :ensure t ;; install the evil package if not installed
	  :init ;; tweak evil's configuration before loading it
	  (setq evil-search-module 'evil-search)
	  (setq evil-ex-complete-emacs-commands nil)
	  (setq evil-vsplit-window-right t)
	  (setq evil-split-window-below t)
	  (setq evil-shift-round nil)
	  (setq evil-want-C-u-scroll t)
	  :config ;; tweak evil after loading it
          (evil-define-key 'normal org-mode-map (kbd "<tab>") #'org-cycle)
	  (evil-mode)

	  ;; example how to map a command in normal mode (called 'normal state' in evil)
	  (define-key evil-normal-state-map (kbd ", w") 'evil-window-vsplit))

  #+end_src

* Tree Sitter 
  #+begin_src emacs-lisp
(use-package tree-sitter
  :ensure t 
  :init 
)
(use-package tree-sitter-langs
  :ensure t 
  :init 
)

(global-tree-sitter-mode)
(add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode) 

  #+end_src
* Theme
  #+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
  :ensure t
  :init
  (load-theme 'zenburn t)
)

  #+END_SRC
  
* LSP mode
  #+BEGIN_SRC emacs-lisp
	(use-package lsp-mode
	  :ensure t
	  :init
	  ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
	  (setq lsp-keymap-prefix "C-c l")
	  :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
		 (python-mode . lsp)
		 (css-mode . lsp)
		 (rust-mode . lsp)
		 (Dockerfile-mode . lsp)
		 (go-mode . lsp)
		 (typescript-mode . lsp)
		 ;; if you want which-key integration
		 (lsp-mode . lsp-enable-which-key-integration))
	  :commands lsp)

	;; optionall
    (use-package lsp-ivy :ensure t :commands lsp-ivy-workspace-symbol)
    (use-package lsp-ui :ensure t :commands lsp-ui-mode)
  #+END_SRC

* Dockerfile Mode
  #+BEGIN_SRC emacs-lisp
    (use-package dockerfile-mode 
      :ensure t
      :init
    (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode))
    )
  #+END_SRC

* Flycheck
  #+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))
  #+END_SRC
* Python
  #+BEGIN_SRC emacs-lisp
    (use-package lsp-pyright
  :ensure t
  :hook (python-mode . (lambda ()
                          (require 'lsp-pyright)
                          (lsp))))  ; or lsp-deferred

  #+END_SRC

* Rust
  #+BEGIN_SRC emacs-lisp
    (use-package rust-mode :ensure t )

  #+END_SRC

* Web stuff
  #+BEGIN_SRC emacs-lisp
    (use-package typescript-mode :ensure t )

  #+END_SRC

* Org settings
General Org mode settings
** Publish 
  #+BEGIN_SRC emacs-lisp

    (setq org-export-global-macros '(("timestamp" . "@@html:<span class=\"timestamp\">[$1]</span>@@")))

    (defun my/org-sitemap-date-entry-format (entry style project)
      "Format ENTRY in org-publish PROJECT Sitemap format ENTRY ENTRY STYLE format that includes date."
      (let ((filename (org-publish-find-title entry project)))
	(if (= (length filename) 0)
	    (format "*%s*" entry)
	  (format "{{{timestamp(%s)}}} [[file:%s][%s]]"
		  (format-time-string "%Y-%m-%d"
				      (org-publish-find-date entry project))
		  entry
		  filename))))


	(setq org-publish-project-alist
	  '(
	    ("org-posts"
	     :base-directory "~/Projects/trying-to-code/"
	     :base-extension "org"
	     :publishing-directory "~/Projects/trying-to-code/public/"
	     :recursive t
	     :publishing-function org-html-publish-to-html
	     :headline-levels 4             ; Just the default for this project.
	     :auto-preamble nil
	     :auto-postamble nil
	     :table-of-contents nil
	     :auto-sitemap t
	     :section-numbers nil
	     :sitemap-filename "sitemap.org"
	     :sitemap-title "Trying to Code"
	     :sitemap-format-entry my/org-sitemap-date-entry-format
	     :html-head "<link rel=\"stylesheet\" href=\"../style.css\" type=\"text/css\"/>"
	     :html-preamble "<nav> <a href=\"/\">Home</a>  <a href=\"/\">About</a> </nav> "
	     :html-postamble "<footer> <div id=\"updated\"> %C</div> </footer>"
	     )

	   ;; ... add all the components here (see below)...
	    ("org-static"
	     :base-directory "~/Projects/trying-to-code/static/"
	     :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
	     :publishing-directory "~/Projects/trying-to-code/public/"
	     :recursive t
	     :publishing-function org-publish-attachment
	     )

	    ("blog" :components ("org-posts" "org-static"))
    )
    )





  #+END_SRC
** Agenda
#+begin_src emacs-lisp
  (add-to-list 'org-agenda-files "~/todo.org")
#+end_src

* Fonts
  #+BEGIN_SRC emacs-lisp
  (set-frame-font "Hack-14" nil t)
  #+END_SRC

* Beacon mode
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :init
    (beacon-mode 1))
#+END_SRC

* Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
    :ensure t
    :config
    (global-set-key (kbd "M-m") 'magit)
)
#+END_SRC

* Powerline 
#+BEGIN_SRC emacs-lisp
  (use-package telephone-line
    :ensure t
    :init 
    (telephone-line-mode t)
  )
#+END_SRC

* Display Time
   #+BEGIN_SRC emacs-lisp
   (setq display-time-24h-format t)
   (display-time-mode 1)
   #+END_SRC

* Dashboard
  #+begin_src emacs-lisp
      (use-package dashboard
      :ensure t
      :init
      (dashboard-setup-startup-hook)
      :config
	(setq dashboard-items '((recents  . 10) (projects . 5) )) 
    )
  #+end_src

* Ivy
  #+BEGIN_SRC emacs-lisp

    (use-package swiper
	:ensure t
    )

    (use-package counsel
	:ensure t
    )

    (use-package ivy
	:ensure t
	:config
	(ivy-mode 1)
	(setq ivy-use-virtual-buffers t)
	(setq enable-recursive-minibuffers t)
	;; enable this if you want `swiper' to use it
	;; (setq search-default-mode #'char-fold-to-regexp)
	(global-set-key (kbd "C-s") 'swiper)
	(global-set-key (kbd "C-c C-r") 'ivy-resume)
	(global-set-key (kbd "M-x") 'counsel-M-x)
	(global-set-key (kbd "C-x C-f") 'counsel-find-file)
	(global-set-key (kbd "<f1> f") 'counsel-describe-function)
	(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
	(global-set-key (kbd "<f1> l") 'counsel-find-library)
	(global-set-key (kbd "C-c g") 'counsel-git)
	(global-set-key (kbd "C-c j") 'counsel-git-grep)
	(global-set-key (kbd "C-c l") 'counsel-fzf)
	(global-set-key (kbd "C-c k") 'counsel-yank-pop)
	(define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
    )


  #+END_SRC

* Prescient
This enhances the Ivy and company
   #+BEGIN_SRC emacs-lisp
    ;; Add Prescient Mode
    (use-package  prescient :ensure t)
    (use-package ivy-prescient :ensure t :init (ivy-prescient-mode))
    (use-package company-prescient :ensure t :init (company-prescient-mode))
   #+END_SRC

* Programming general
General Programming enhancements
** Rainbow Delimiters
   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-delimiters
     :ensure t
     :init
     (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
     )
   #+END_SRC


** Smart Parens
   #+BEGIN_SRC emacs-lisp
   (use-package smartparens
   :ensure t
   :init
   (add-hook 'prog-mode-hook #'smartparens-mode)
   )
   #+END_SRC
** Linum Mode
   #+BEGIN_SRC emacs-lisp
     (add-hook 'prog-mode-hook 'linum-mode)
   #+END_SRC

* Projectile
Manage projects
#+begin_src emacs-lisp
  (use-package projectile
  :ensure t
  :init 
  (projectile-mode +1)
  :config 
  (global-set-key (kbd "C-x p") 'projectile-command-map)
  )

#+end_src

* Company Mode 
Completion
#+begin_src emacs-lisp
  (use-package company
  :ensure t
  :init 
  (add-hook 'after-init-hook 'global-company-mode)
  )

#+end_src

* Yasnippet 
Mostly to use with company mode
#+begin_src emacs-lisp
  (use-package yasnippet
  :ensure t
  :init 
  (add-hook 'after-init-hook 'global-company-mode)
  :config
  (yas-reload-all)
  (add-hook 'prog-mode-hook #'yas-minor-mode)
  )

#+end_src

* AMX 
Better M-X
#+begin_src emacs-lisp
  (use-package amx
  :ensure t
  :init 
  (amx-mode)
  )

#+end_src

* Undo Tree
#+begin_src emacs-lisp
  (use-package undo-tree
  :ensure t
  :init 
  (global-undo-tree-mode)
  :config
  (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
  )
#+end_src
